generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  address     String   @id @map("_id")
  username    String?
  language    String   @default("en")
  country     Country? @relation(fields: [countryname], references: [name])
  countryname String?

  accountDetails AccountDetails?
  transactions   Transaction[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model AccountDetails {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  accountNumber String
  name          String
  bank          String

  user   User   @relation(fields: [userId], references: [address])
  userId String @unique
}

model Country {
  currencySymbol    String
  name              String  @id @map("_id")
  baseToken         Tokens? @relation(fields: [baseTokencoinType], references: [coinType])
  baseTokencoinType String

  User User[]
}

model Tokens {
  name     String
  decimals Int
  symbol   String
  coinType String @id @map("_id")
  Country Country[]
}

model Transaction {
  id             String            @id @default(cuid()) @map("_id")
  transactionId  String            @unique
  type           TransactionType
  interactedWith String?
  date           DateTime          @default(now())
  status         TransactionStatus
  fees           Float
  incomingAsset  String?
  incomingAmount Float?
  outgoingAsset  String?
  outgoingAmount Float?

  user   User   @relation(fields: [userId], references: [address])
  userId String
}

enum TransactionType {
  SWAP
  SEND
  RECEIVE
  DEPOSIT
  WITHDRAW
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}

enum WithdrawStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum DepositStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model PayfricaAgents {
  id         String   @id @map("_id") // removed @db.ObjectId and @default(auto())
  validTypes Json
  agents     Json
}

model Agent {
  id                               String   @id @map("_id")
  addr                             String
  balance                          BigInt
  coinType                         String
  accountNumber                    String
  bank                             String
  name                             String
  pendingWithdrawals               String[]
  successfulWithdrawals            String[]
  totalSuccessfulWithdrawals       Int      @default(0)
  totalPendingWithdrawals          Int      @default(0)
  totalSuccessfulWithdrawalsAmount BigInt   @default(0)
  totalPendingWithdrawalsAmount    BigInt   @default(0)
  pendingDeposits                  String[]
  successfulDeposits               String[]
  totalSuccessfulDeposits          BigInt   @default(0)
  totalPendingDeposits             BigInt   @default(0)
  totalSuccessfulDepositsAmount    BigInt   @default(0)
  totalPendingDepositsAmount       BigInt   @default(0)
  unsuccessfulDeposits             String[]
  totalUnsuccessfulDeposits        Int      @default(0)
  maxWithdrawLimit                 BigInt   @default(0)
  maxDepositLimit                  BigInt   @default(0)
  minWithdrawLimit                 BigInt   @default(0)
  minDepositLimit                  BigInt   @default(0)
  createdAt                        DateTime @default(now())
  updatedAt                        DateTime @updatedAt

  @@index([addr])
}

model WithdrawRequest {
  id          String         @id @map("_id")
  amount      BigInt
  user        String // User's blockchain address
  agentId     String
  coinType    String
  status      WithdrawStatus @default(PENDING)
  requestTime DateTime       @map("request_time")
  statusTime  DateTime?      @map("status_time")
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([agentId])
}

model DepositRequest {
  id                String        @id @map("_id")
  amount            BigInt
  user              String // User's blockchain address
  agentId           String
  successfulAgentId String?
  coinType          String
  comment           String
  status            DepositStatus @default(PENDING)
  requestTime       DateTime      @map("request_time")
  statusTime        DateTime?     @map("status_time")
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@index([agentId])
}

model Cursor {
  id       String @id @map("_id")
  eventSeq String
  txDigest String
}

model Pool {
  id             String   @id @map("_id")
  coinType       String
  coinName       String
  coinBalance    BigInt // total coin in pool
  rewardsBalance BigInt // total rewards
  feeDecimal     Int
  defaultFees    Int? // nullable
  coinDecimal    Int
  ratesDollar    Float
  createdAt      DateTime @default(now())

  liquidityProviders LiquidityProvider[]
  swapFees           SwapFee[]
}

model LiquidityProvider {
  id       String @id @map("_id")
  poolId   String
  provider String // address
  amount   BigInt
  rewards  BigInt // pending rewards

  pool Pool @relation(fields: [poolId], references: [id])

  @@index([poolId])
}

model SwapFee {
  id        String @id @map("_id")
  poolId    String
  threshold BigInt
  fee       Int

  pool Pool @relation(fields: [poolId], references: [id])

  @@index([poolId])
}

model PoolEvent {
  id        String   @id @map("_id")
  eventType String
  poolId    String
  coinType  String
  details   Json // Flexible event details
  timestamp DateTime @default(now())
}
