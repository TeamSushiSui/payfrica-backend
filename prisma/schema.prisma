// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String        @id @map("_id")
  address         String        @unique
  username        String?
  accountDetails  AccountDetails?
  transactions    Transaction[]          
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// model User {
//   id              String   @id  @map("_id")
//   address         String  @unique
//   username        String?
//   accountDetails  AccountDetails?
//   withdrawals     Json[]   // History of withdrawals
//   deposits        Json[]   // History of deposits
//   totalWithdrawn  Float    @default(0)
//   totalDeposited  Float    @default(0)
//   createdAt       DateTime @default(now())
//   updatedAt       DateTime @updatedAt
// }

model Transaction {
  id               String              @id @default(cuid()) @map("_id")
  transactionId    String              @unique
  type             TransactionType
  interactedWith   String?
  date             DateTime            @default(now())
  status           TransactionStatus
  fees             Float
  // swap vs send/receive details:
  incomingAsset    String?
  incomingAmount   Float?
  outgoingAsset    String?
  outgoingAmount   Float?

  user             User                @relation(fields: [userId], references: [id])
  userId           String
}

enum TransactionType {
  SWAP
  SEND
  RECEIVE
  DEPOSIT
  WITHDRAW
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}

model AccountDetails {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  accountNumber  String
  name           String
  bank           String
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
}


enum WithdrawStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum DepositStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model Agent {
  id                           String          @id @default(auto()) @map("_id") @db.ObjectId
  addr                         String          // Agent's blockchain address
  balance                      Float           // Current balance
  coinType                     String          // Type of coin this agent handles
  accountNumber                String
  bank                         String
  name                         String
  pendingWithdrawals           WithdrawRequest[] @relation("PendingWithdrawals")
  successfulWithdrawals        WithdrawRequest[] @relation("SuccessfulWithdrawals")
  totalSuccessfulWithdrawals   Int             @default(0)
  totalPendingWithdrawals      Int             @default(0)
  totalSuccessfulWithdrawalsAmount Float       @default(0)
  totalPendingWithdrawalsAmount Float          @default(0)
  pendingDeposits              DepositRequest[] @relation("PendingDeposits")
  successfulDeposits           DepositRequest[] @relation("SuccessfulDeposits")
  totalSuccessfulDeposits      Int             @default(0)
  totalPendingDeposits         Int             @default(0)
  totalSuccessfulDepositsAmount Float          @default(0)
  totalPendingDepositsAmount   Float           @default(0)
  unsuccessfulDeposits         DepositRequest[] @relation("UnsuccessfulDeposits")
  totalUnsuccessfulDeposits    Int             @default(0)
  maxWithdrawLimit             Float           @default(0)
  maxDepositLimit              Float           @default(0)
  minWithdrawLimit             Float           @default(0)
  minDepositLimit              Float           @default(0)
  createdAt                    DateTime        @default(now())
  updatedAt                    DateTime        @updatedAt
}

model WithdrawRequest {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  requestId   String        // Original blockchain request ID if available
  amount      Float
  user        String         // User's blockchain address
  agentId     String?
  agent       Agent?         @relation("PendingWithdrawals", fields: [agentId], references: [id], onDelete: SetNull)
  successfulAgent Agent?     @relation("SuccessfulWithdrawals", fields: [successfulAgentId], references: [id], onDelete: SetNull)
  successfulAgentId String?
  coinType    String
  status      WithdrawStatus @default(PENDING)
  requestTime DateTime       @default(now())
  statusTime  DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model DepositRequest {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  requestId   String?       // Original blockchain request ID if available
  amount      Float
  user        String        // User's blockchain address
  agentId     String?
  agent       Agent?        @relation("PendingDeposits", fields: [agentId], references: [id], onDelete: SetNull)
  successfulAgent Agent?    @relation("SuccessfulDeposits", fields: [successfulAgentId], references: [id], onDelete: SetNull)
  successfulAgentId String?
  unsuccessfulAgent Agent?  @relation("UnsuccessfulDeposits", fields: [unsuccessfulAgentId], references: [id], onDelete: SetNull)
  unsuccessfulAgentId String?
  coinType    String
  status      DepositStatus @default(PENDING)
  requestTime DateTime      @default(now())
  statusTime  DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Cursor {
  id        String   @id @map("_id")
  eventSeq  String
  txDigest  String
}