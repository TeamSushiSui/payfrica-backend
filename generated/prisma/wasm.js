
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.UserScalarFieldEnum = {
  address: 'address',
  username: 'username',
  language: 'language',
  countryname: 'countryname',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountDetailsScalarFieldEnum = {
  id: 'id',
  accountNumber: 'accountNumber',
  name: 'name',
  bank: 'bank',
  userId: 'userId'
};

exports.Prisma.CountryScalarFieldEnum = {
  currencySymbol: 'currencySymbol',
  name: 'name',
  baseTokencoinType: 'baseTokencoinType'
};

exports.Prisma.TokensScalarFieldEnum = {
  name: 'name',
  decimals: 'decimals',
  symbol: 'symbol',
  coinType: 'coinType'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  transactionId: 'transactionId',
  type: 'type',
  interactedWith: 'interactedWith',
  date: 'date',
  status: 'status',
  fees: 'fees',
  incomingAsset: 'incomingAsset',
  incomingAmount: 'incomingAmount',
  outgoingAsset: 'outgoingAsset',
  outgoingAmount: 'outgoingAmount',
  userId: 'userId'
};

exports.Prisma.PayfricaAgentsScalarFieldEnum = {
  id: 'id',
  validTypes: 'validTypes',
  agents: 'agents'
};

exports.Prisma.AgentScalarFieldEnum = {
  id: 'id',
  addr: 'addr',
  balance: 'balance',
  coinType: 'coinType',
  accountNumber: 'accountNumber',
  bank: 'bank',
  name: 'name',
  pendingWithdrawals: 'pendingWithdrawals',
  successfulWithdrawals: 'successfulWithdrawals',
  totalSuccessfulWithdrawals: 'totalSuccessfulWithdrawals',
  totalPendingWithdrawals: 'totalPendingWithdrawals',
  totalSuccessfulWithdrawalsAmount: 'totalSuccessfulWithdrawalsAmount',
  totalPendingWithdrawalsAmount: 'totalPendingWithdrawalsAmount',
  pendingDeposits: 'pendingDeposits',
  successfulDeposits: 'successfulDeposits',
  totalSuccessfulDeposits: 'totalSuccessfulDeposits',
  totalPendingDeposits: 'totalPendingDeposits',
  totalSuccessfulDepositsAmount: 'totalSuccessfulDepositsAmount',
  totalPendingDepositsAmount: 'totalPendingDepositsAmount',
  unsuccessfulDeposits: 'unsuccessfulDeposits',
  totalUnsuccessfulDeposits: 'totalUnsuccessfulDeposits',
  maxWithdrawLimit: 'maxWithdrawLimit',
  maxDepositLimit: 'maxDepositLimit',
  minWithdrawLimit: 'minWithdrawLimit',
  minDepositLimit: 'minDepositLimit',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WithdrawRequestScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  user: 'user',
  agentId: 'agentId',
  coinType: 'coinType',
  status: 'status',
  requestTime: 'requestTime',
  statusTime: 'statusTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DepositRequestScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  user: 'user',
  agentId: 'agentId',
  successfulAgentId: 'successfulAgentId',
  coinType: 'coinType',
  comment: 'comment',
  status: 'status',
  requestTime: 'requestTime',
  statusTime: 'statusTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CursorScalarFieldEnum = {
  id: 'id',
  eventSeq: 'eventSeq',
  txDigest: 'txDigest'
};

exports.Prisma.PoolScalarFieldEnum = {
  id: 'id',
  coinType: 'coinType',
  coinName: 'coinName',
  coinBalance: 'coinBalance',
  rewardsBalance: 'rewardsBalance',
  feeDecimal: 'feeDecimal',
  defaultFees: 'defaultFees',
  coinDecimal: 'coinDecimal',
  ratesDollar: 'ratesDollar',
  createdAt: 'createdAt'
};

exports.Prisma.LiquidityProviderScalarFieldEnum = {
  id: 'id',
  poolId: 'poolId',
  provider: 'provider',
  amount: 'amount',
  rewards: 'rewards'
};

exports.Prisma.SwapFeeScalarFieldEnum = {
  id: 'id',
  poolId: 'poolId',
  threshold: 'threshold',
  fee: 'fee'
};

exports.Prisma.PoolEventScalarFieldEnum = {
  id: 'id',
  eventType: 'eventType',
  poolId: 'poolId',
  coinType: 'coinType',
  details: 'details',
  timestamp: 'timestamp'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.TransactionType = exports.$Enums.TransactionType = {
  SWAP: 'SWAP',
  SEND: 'SEND',
  RECEIVE: 'RECEIVE',
  DEPOSIT: 'DEPOSIT',
  WITHDRAW: 'WITHDRAW'
};

exports.TransactionStatus = exports.$Enums.TransactionStatus = {
  PENDING: 'PENDING',
  SUCCESS: 'SUCCESS',
  FAILED: 'FAILED'
};

exports.WithdrawStatus = exports.$Enums.WithdrawStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.DepositStatus = exports.$Enums.DepositStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.Prisma.ModelName = {
  User: 'User',
  AccountDetails: 'AccountDetails',
  Country: 'Country',
  Tokens: 'Tokens',
  Transaction: 'Transaction',
  PayfricaAgents: 'PayfricaAgents',
  Agent: 'Agent',
  WithdrawRequest: 'WithdrawRequest',
  DepositRequest: 'DepositRequest',
  Cursor: 'Cursor',
  Pool: 'Pool',
  LiquidityProvider: 'LiquidityProvider',
  SwapFee: 'SwapFee',
  PoolEvent: 'PoolEvent'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
